import Head from 'next/head'
// import Image from 'next/image'
import styles from '../styles/Home.module.css'

// package
import { useDispatch, useSelector } from 'react-redux'
import { useEffect, useState } from 'react'
import moment from 'moment'
import { Button, Image } from 'antd';
import 'antd/dist/antd.css';
import dynamic from 'next/dynamic'

const DynamicReactJson = dynamic(import('react-json-view'), { ssr: false });

// actions
import { queryDynamoDB, queryRDS } from '../appRedux/actions'

const IMAGE_URL = process.env.IMAGE_URL;

const headingStyles = {
  marginTop: 0,
  marginBottom: 64,
  maxWidth: 320,
}
const headingAccentStyles = {
  color: "#663399",
}
const paragraphStyles = {
  marginBottom: 48,
}
const codeStyles = {
  color: "#8A6534",
  padding: 4,
  backgroundColor: "#FFF4DB",
  fontSize: "1.25rem",
  borderRadius: 4,
}

const Home = () => {
  const dispatch = useDispatch();
  const { dynamoDB_Data, rds_Data, dynamoDB_Data_loader, rds_Data_loader } = useSelector((state) => state)

  const _dynamoDB_onClick = () => {
    dispatch(queryDynamoDB())
  }
  const _rds_onClick = () => {
    dispatch(queryRDS())
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div style={{ display: "flex", flex: 1, flexDirection: "row" }}>
          <div style={{ flex: 0.5 }}>
            <h1 style={headingStyles}>
              Congratulations
              <br />
              <span style={headingAccentStyles}>â€” you just made a NextJs site! </span>
              <span role="img" aria-label="Party popper emojis">
                ðŸŽ‰ðŸŽ‰ðŸŽ‰
              </span>
            </h1>
            <p style={paragraphStyles}>
              <code style={codeStyles}>
                It's OK to struggle. It's not ok to give up.
                <span role="img" aria-label="Sunglasses smiley emoji">
                  ðŸ˜Ž
                </span>
              </code>
            </p>
          </div>

          <div style={{ flex: 0.5 }}>
            <Image
              preview={false}
              width={500}
              src={IMAGE_URL}
            />
          </div>
        </div>


        <div style={{ display: "flex", flex: 1, flexDirection: "row" }}>
          <div style={{ padding: 20, flex: 0.5 }}>
            <h1>
              Click below button to get data from Dynamo DB
            </h1>
            <div style={{ marginTop: 20 }}>
              <Button type="primary" loading={dynamoDB_Data_loader} onClick={_dynamoDB_onClick}>
                Query
              </Button>
            </div>
            <div style={{ marginTop: 20, padding: 10, borderWidth: 1, borderColor: "black" }}>
              <DynamicReactJson src={dynamoDB_Data} />
            </div>
          </div>

          <div style={{ padding: 20, flex: 0.5 }}>
            <h1>
              Click below button to get data from RDS
            </h1>
            <div style={{ marginTop: 20 }}>
              <Button type="primary" loading={rds_Data_loader} onClick={_rds_onClick}>
                Query
              </Button>
            </div>
            <div style={{ marginTop: 20, padding: 10, borderWidth: 1, borderColor: "black" }}>
              <DynamicReactJson src={rds_Data} />
            </div>
          </div>
        </div>


      </main>

      <footer className={styles.footer}>
        <a>
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

// export const getStaticProps = wrapper.getStaticProps(async ({ store }) => {
//   const dataState = store.getState();
//   console.log("dataState: ", dataState)
//   store.dispatch(END);
//   await store.sagaTask.toPromise()

//   return { 
//     props: { 
//       dataState
//     }
//   };
// })

// export const getServerSideProps = wrapper.getServerSideProps(async ({ store }) => {
//   const dataState = store.getState();
//   console.log("dataState: ", dataState)
//   store.dispatch(END);
//   await store.sagaTask.toPromise()

//   return {
//     props: {
//       dataState
//     }
//   };
// })


export default Home
